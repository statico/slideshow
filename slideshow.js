// Generated by CoffeeScript 1.6.1
(function() {
  var init;

  init = function(_arg) {
    var body, box, current, display, el, i, image, imageLinks, index, menu, nonImages, old, path, paths, preload, rss, setIndex, ul, _fn, _i, _j, _k, _len, _len1, _len2;
    paths = _arg.paths, nonImages = _arg.nonImages;
    rss = $('a[href$=".rss"]').remove();
    imageLinks = [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      imageLinks.push($('<a>').attr({
        href: path
      }).text(path).addClass('item'));
    }
    $(document.head).append('<link rel="stylesheet" href="/slideshow/slideshow.css"/>');
    body = $(document.body).empty();
    menu = $('<div id="menu"/>').appendTo(body);
    box = $('<div id="box"/>').appendTo(body);
    display = $('<img/>').appendTo(box).hide();
    preload = new Image();
    image = new Image();
    old = $();
    current = $();
    index = 0;
    setIndex = function(i) {
      if (!imageLinks[i]) {
        return;
      }
      index = i;
      if (image.onload) {
        current.removeClass('on loading');
      }
      current = $(imageLinks[i]);
      current.addClass('loading');
      menu.stop().scrollTo(current, {
        duration: 300,
        offset: {
          top: -100
        }
      });
      image.onload = function() {
        var h, maxh, maxw, ratio, w;
        if (current.attr('href') === old.attr('href')) {
          return;
        }
        current.removeClass('loading');
        current.addClass('on');
        old.removeClass('on loading');
        old = current;
        document.location.hash = i;
        maxw = box.innerWidth();
        maxh = box.innerHeight();
        w = image.width;
        h = image.height;
        if ((w == null) || (h == null)) {
          return;
        }
        ratio = Math.min(maxw / w, maxh / h);
        display.show().attr({
          src: image.src
        }).width(w * ratio).height(h * ratio).css({
          display: 'block',
          margin: '0 auto'
        });
        return image.onload = null;
      };
      image.src = imageLinks[i].attr('href');
      if (imageLinks[i + 1]) {
        return preload.src = imageLinks[i + 1].attr('href');
      }
    };
    index = parseInt(document.location.hash.substr(1));
    if (!isNaN(index)) {
      setIndex(index);
    } else {
      setIndex(0);
    }
    $(window).on('hashchange', function() {
      return setIndex(parseInt(document.location.hash.substr(1)));
    });
    _fn = function(el, i) {
      return $(el).on('click', function() {
        setIndex(i);
        return false;
      });
    };
    for (i = _j = 0, _len1 = imageLinks.length; _j < _len1; i = ++_j) {
      el = imageLinks[i];
      _fn(el, i);
    }
    $(document).on('keydown', function(e) {
      switch (String.fromCharCode(e.which).toUpperCase()) {
        case 'J':
          return setIndex(index + 1);
        case 'K':
          return setIndex(index - 1);
      }
    });
    menu.append("<h1>" + document.title + "</h1>\n<p class=\"notice\">\n  These items are not the property of this web site and are not subject to the\n  license or conditions expressed elsewhere on the site. Their origin may be\n  unknown. This part of the site is not indexed.\n</p>\n<p class=\"meta\">Keys: K=prev J=next - <a href=\"" + (rss.attr('href')) + "\">RSS feed</a></p>");
    if (nonImages) {
      ul = $('<ul>').appendTo(menu);
      for (_k = 0, _len2 = nonImages.length; _k < _len2; _k++) {
        path = nonImages[_k];
        ul.append("<li><a href=\"" + path + "\">" + path + "</a></li>");
      }
    }
    return menu.append(imageLinks);
  };

  $(document).ready(function() {
    return $.getJSON("images.json", function(data, status, xhr) {
      if (status === 'success') {
        return init(data);
      } else {
        return document.body.innerHTML = "Couldn't get images.json";
      }
    });
  });

}).call(this);
